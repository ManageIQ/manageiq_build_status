#!/usr/bin/env ruby

require 'bundler/inline'
gemfile do
  source 'https://rubygems.org'
  gem 'more_core_extensions', :require => false
end

VERSIONS = %w[
  master
  spassky
  radjabov
  quinteros
].freeze

require "active_support/all"
require "more_core_extensions/all"
require "stringio"

require 'open-uri'
all_repos = YAML.load(URI.open("https://raw.githubusercontent.com/ManageIQ/manageiq-release/master/config/repos.yml"))

missing_versions = VERSIONS.reject { |v| all_repos.key?(v) }
raise "Versions missing in repos.yml: #{missing_versions.join(", ")}" if missing_versions.any?

# Inject the dummy provider since it's not shipped, but we want to report on it
all_repos.store_path("master", "ManageIQ/manageiq-providers-dummy_provider", nil)

CATEGORIES = {
  "Core" => %w[
    ManageIQ/manageiq
    ManageIQ/manageiq-schema
    ManageIQ/manageiq-api
    ManageIQ/manageiq-automation_engine
    ManageIQ/manageiq-content
  ],
  "UI" => %w[
    ManageIQ/manageiq-ui-classic
    ManageIQ/manageiq-ui-service
    ManageIQ/manageiq-decorators
    ManageIQ/ui-components
  ],
  "Providers" => VERSIONS.flat_map { |v| all_repos[v].keys.grep(/^ManageIQ\/manageiq-providers-/) }.uniq.sort,
  "Dependencies" => %w[
    ManageIQ/manageiq-consumption
    ManageIQ/dbus_api_service
    ManageIQ/httpd_configmap_generator
    ManageIQ/manageiq-gems-pending
    ManageIQ/manageiq-smartstate
    ManageIQ/amazon_ssa_support
  ],
  "Appliance and Build" => %w[
    ManageIQ/manageiq-appliance-build
    ManageIQ/manageiq-appliance_console
    ManageIQ/manageiq-pods
    ManageIQ/manageiq-rpm_build
  ],
  "Documentation and Website" => %w[
    ManageIQ/manageiq-documentation
    ManageIQ/guides
    ManageIQ/manageiq.org
  ]
}.freeze

STILL_TRAVIS = %w[
  ManageIQ/httpd_configmap_generator
].freeze

HAS_MASTER = %w[
  ManageIQ/dbus_api_service
  ManageIQ/guides
  ManageIQ/httpd_configmap_generator
  ManageIQ/manageiq-appliance_console
  ManageIQ/manageiq-smartstate
  ManageIQ/manageiq.org
].freeze

# Build the output
output = StringIO.new

def ci_link(repo, version)
  if STILL_TRAVIS.include?(repo)
    "[![Build Status](https://travis-ci.com/#{repo}.svg?branch=#{version})](https://travis-ci.com/github/#{repo})"
  else
    "[![CI](https://github.com/#{repo}/actions/workflows/ci.yaml/badge.svg?branch=#{version})](https://github.com/#{repo}/actions/workflows/ci.yaml?query=branch\%3A#{version})"
  end
end

CATEGORIES.each do |title, repos|
  table = VERSIONS
    .map do |version|
      repos.map do |repo|
        repo_data = all_repos.fetch_path(version, repo) || {} if all_repos[version].key?(repo) # Empty data of an existing key is stored as a nil instead of {}
        (version == "master" && HAS_MASTER.include?(repo)) || (repo_data && !repo_data["has_real_releases"]) ? ci_link(repo, version) : nil
      end
    end
    .unshift(repos.map { |repo| "[#{repo.sub(/^ManageIQ\//, "")}](https://github.com/#{repo})" })
    .transpose
    .unshift(VERSIONS.map(&:titleize).unshift("Repo"))

  output.puts "# #{title}"
  output.puts
  output.puts table.tableize
  output.puts
end

# Write the output into the README file
GENERATOR_LINE = "<!-- Repo links generated after here -->\n".freeze

file  = Pathname.new(__dir__).join("..", "README.md")
lines = file.readlines.take_while { |l| l != GENERATOR_LINE }
lines << GENERATOR_LINE
lines = lines.join << output.string
file.write(lines)
